plugins {
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

version = mod_version
group = mod_group_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

base {
    archivesName = mod_id
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        // applies to all the run configs below
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', project.mod_id
            args '--nogui'
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.3.2")) {
        jarJar.ranged(it, "[0.3.2,)")
    }
/*    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'*/
}
/*
mixin {
    add sourceSets.main, "mixins.cheatmode.refmap.json"
    config 'cheatmode.mixins.json'

    debug.verbose = true
    debug.export = true
}*/

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Cheat Mode",
                "Specification-Vendor"    : "Krxwallo",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : mod_name,
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "Krxwallo",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version         : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties + [project: project]
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// Merge the resources and classes into the same directory.
// This is done because java expects modules to be in a single directory.
// And if we have it in multiple we have to do performance intensive hacks like having the UnionFileSystem
// This will eventually be migrated to ForgeGradle so modders don't need to manually do it. But that is later.
sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}